version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=`curl -H "token: 84c5d1b7-bf5a-4e4b-86ab-62b35d9d7ec5" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}`
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm runmigrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:14.7.0
    steps:
      - checkout
      #- restore_cache:
      #    keys: [new-frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm i 
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: new-frontend-build

  build-backend:
    docker:
      - image: circleci/node:14.7.0
    steps:
      - checkout
      #- restore_cache:
      #    keys: [new-backend-build]
      - run:
          name: Install dependencies
          command: |
              cd backend
              npm i  
      - run:
          name: Back-end build
          command: |
             cd backend
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: new-backend-build

  test-frontend:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: fix test 
          command: |
            cd frontend
            npm install oauth-sign@0.9.0 
      - run:
          name: test frontend
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test backend
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: fix scan
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force           
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm audit --audit-level=critical    

  scan-backend:
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: fix scan
          command: |
            cd backend
            npm audit fix --audit-level=critical --force              
      - run:
          name: scan backend
          command: |
            cd backend
            npm audit --audit-level=critical
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"                                      
 
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople\
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" --output text >> inventory.txt
            cp inventory.txt ~/
            cat inventory.txt
            cat ~/inventory.txt  
      - run:
          name: create memstash for back-end dns-name
          command: |

            backendurl=`aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicDnsName' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" --output text`

            curl -H "Content-Type: text/plain" \
              -H "token: 0f745c33-38cb-4caa-bcfe-4e221d570a3a" \
              --request PUT --data "$backendurl" https://api.memstash.io/values/backend-dnsname-${CIRCLE_WORKFLOW_ID}   
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - destroy-environment 

  configure-infrastructure:
    docker:
      - image: contentwisetv/ansible-aws
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["16:63:7e:a5:10:d3:0b:34:02:fd:bc:29:4f:7a:01:73"]
      - run:
          name: Install dependencies
          command: |
            apk --update add tar gzip
      - attach_workspace:
          at: ~/            
      - run:
          name: Configure server
          environment:
            ANSIBLE_HOST_KEY_CHECKING: False
          command: |
            cd .circleci/ansible 
            ansible-playbook configure-server.yml -i ~/inventory.txt
      - destroy-environment

  run-migrations:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - run:
          name: install less
          command: |
            apt-get update
            apt-get install -yy less
      - run:
          name: DB Setup
          command: |
            cd backend
            touch .env
            echo "ENVIRONMENT=production" >> .env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> .env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> .env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
            cat .env
            cp .env ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations > migration_output.txt
            cat migration_output.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            cstring=`grep -c "has been executed successfully" migration_output.txt || true`
            if [ "$cstring" -gt 0 ]
            then
            echo "Successful"
            curl -H "Content-Type: text/plain" \
            -H "token: 84c5d1b7-bf5a-4e4b-86ab-62b35d9d7ec5" \
            --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
            echo "Failed"
            fi
      - persist_to_workspace:
          root: ~/
          paths:
            - .env
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt-get install -yy less
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=`aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" --output text`

            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd frontend
            npm i
            npm run build
            ls dist      
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
            
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["16:63:7e:a5:10:d3:0b:34:02:fd:bc:29:4f:7a:01:73"]
      - attach_workspace:
          at: ~/        
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt-get install -yy less python3 
            curl https://bootstrap.pypa.io/pip/3.5/get-pip.py -o get-pip.py
            python3 get-pip.py
            python3 -m pip install ansible
            ansible --help   
      - run:
          name: prepare deploy
          command: |
            cp ~/.env backend/
            cd backend
            cat .env
            npm i
            npm run build
            cp .env package.json package-lock.json dist/ 
            tar -czf archive.tar.gz dist/
            cp archive.tar.gz ~/project/.circleci/ansible/roles/deploy/files/
      - run:
          name: Deploy backend
          environment:
            ANSIBLE_HOST_KEY_CHECKING: False          
          command: |
            cd .circleci/ansible
            ansible-playbook deploy-backend.yml -i ~/inventory.txt
      - run:
          name: configure-prometheus-node-exporter
          environment:
            ANSIBLE_HOST_KEY_CHECKING: False
          command: |         
             cd .circleci/ansible
             # aws ec2 describe-instances \
             #  --query 'Reservations[*].Instances[*].PublicIpAddress' \
             #  --filters "Name=tag:project,Values=udapeople" --output text >> inventory.txt
             ansible-playbook configure-prometheus.yml -i ~/inventory.txt         
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install curl
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=`aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" --output text`

            curl -s http://${BACKEND_IP}:3030/api/status  
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-west-2.amazonaws.com/index.html"            

            if curl -s ${URL} | grep "Welcome"
            then
              echo "Welcome"
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip curl
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            --no-paginate --output text)
            
            echo "OldWorkflowID = $OldWorkflowID"

            curl -H "Content-Type: text/plain" \
            -H "token: 5ced8931-cebd-490b-b6f8-ee9afb282677" \
            --request PUT --data "$OldWorkflowID" https://api.memstash.io/values/OldWorkflowID            
            
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=udapeople \
              --stack-name "cloudfront-stack" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}"
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=`curl -H "token: 5ced8931-cebd-490b-b6f8-ee9afb282677" \
            --request GET https://api.memstash.io/values/OldWorkflowID `

            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text)

            #Remove old stacks and files
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws s3api delete-bucket --bucket udapeople-${OldWorkflowID} --region us-west-2
              aws cloudformation delete-stack --stack-name backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name frontend-${OldWorkflowID}
            fi

workflows:
  default:
    jobs:   
      - build-frontend
      - build-backend
      #- test-frontend:
      #    requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      #- scan-backend:
      #    requires: [build-backend] 
      #- scan-frontend:
      #    requires: [build-frontend]
      #- deploy-infrastructure:
      #    requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #- configure-infrastructure:
      #    requires: [deploy-infrastructure]
      #- run-migrations:
      #    requires: [configure-infrastructure]          
      #- deploy-frontend:   
      #    requires: [run-migrations]              
      #- deploy-backend:
      #    requires: [run-migrations]
      #- smoke-test:
      #    requires: [deploy-frontend,deploy-backend]
      #- cloudfront-update:
      #    requires: [smoke-test]
      #- cleanup:
      #    requires: [cloudfront-update]         
               